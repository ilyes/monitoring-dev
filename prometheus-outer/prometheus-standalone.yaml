apiVersion: v1
kind: Template
labels:
  app: prometheus
metadata:
  name: prometheus-ephemeral
  annotations:
    description:  >-
      A Prometheus server to be deployed from within your project, and that
      doesn't require the "cluster-reader" role. Super easy to deploy.


      The deployed Prometheus instance does service discovery of your project
      resources, and automatically polls your annotated metrics endpoints.
      Also, a blackbox_exporter is used for probing of services, and
      kube-state-metrics is configured to get "state" metrics about your
      objects (like number of pods, etc.).


      Prometheus uses EmptyDir for storage, and retains metrics only for 2
      hours. It is meant to be used only as temporary storage for the metrics,
      which can be federated from a bigger Prometheus instance outside of the
      OpenShift project for long-term storage, alerting, visualization, etc.


      Authentication / authorization is not implemented. You are supposed to
      protect the exposed prometheus URL.


      A "view" RoleBinding in the project is created and is required for
      service discovery.
    tags: "quickstart,monitoring,prometheus,time-series"
    openshift.io/provider-display-name: "AdNovum Informatik AG"
    openshift.io/documentation-url: "https://github.com/adnovum/adnovum-openshift-templates/blob/master/prometheus-ephemeral"
    template.openshift.io/bindable: "false"
  message: |-
    The following service has been created in your project: prometheus.

    For more information about using this template, including OpenShift considerations, see https://github.com/adnovum/adnovum-openshift-templates/blob/master/prometheus-ephemeral/README.md

parameters:
- name: PROMETHEUS_IMAGE
  description: "Prometheus image to use"
  required: true
  value: prom/prometheus:v2.2.1

objects:
- apiVersion: v1
  kind: Service
  metadata:
    name: prometheus
  spec:
    ports:
    - name: 9090-tcp
      port: 9090
    selector:
      app: prometheus
      deploymentconfig: prometheus

- apiVersion: v1
  kind: Route
  metadata:
    name: prometheus
  spec:
    port:
      targetPort: 9090-tcp
    to:
      kind: Service
      name: prometheus
      weight: 100

- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: prometheus-config
  data:
      prometheus.yml: |
        # my global config
        global:
          scrape_interval:     30s # Set the scrape interval to every 15 seconds. Default is every 1 minute.
          evaluation_interval: 30s # Evaluate rules every 15 seconds. The default is every 1 minute.
          # scrape_timeout is set to the global default (10s).
        # Alertmanager configuration
        alerting:
          alertmanagers:
          - static_configs:
            - targets:
              # - alertmanager:9093
        # Load rules once and periodically evaluate them according to the global 'evaluation_interval'.
        rule_files:
          # - "first_rules.yml"
          # - "second_rules.yml"
        # A scrape configuration containing exactly one endpoint to scrape:
        # Here it's Prometheus itself.
        scrape_configs:
          # The job name is added as a label `job=<job_name>` to any timeseries scraped from this config.
          - job_name: 'prometheus'
            # metrics_path defaults to '/metrics'
            # scheme defaults to 'http'.
            static_configs:
            - targets: ['localhost:9090']
        remote_read:
        - url: "http://influxdb-svc:8086/api/v1/prom/read?u=prom&p=prom&db=prometheus"
          read_recent: true
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    name: prometheus
  spec:
    replicas: 1
    selector:
      app: prometheus
      deploymentconfig: prometheus
    template:
      metadata:
        labels:
          app: prometheus
          deploymentconfig: prometheus
      spec:
        containers:
        - name: prometheus
          image: ${PROMETHEUS_IMAGE}
          imagePullPolicy: Always
          ports:
          - containerPort: 9090
            protocol: TCP
          args:
          - --config.file=/etc/prometheus/prometheus.yml
          - --web.listen-address=:9090
          - --web.console.templates=/usr/share/prometheus/consoles
          - --web.console.libraries=/usr/share/prometheus/console_libraries
          - --storage.tsdb.path=/prometheus
          - --storage.tsdb.retention=30d
          - --storage.tsdb.min-block-duration=15m
          - --storage.tsdb.max-block-duration=60m
          env:
            - name: MY_POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          volumeMounts:
          - name: datadir
            mountPath: /prometheus
          - name: prometheus-config
            mountPath: "/etc/prometheus"
        volumes:
        - name: datadir
          emptyDir: {}
        - name: prometheus-config
          configMap:
              name: prometheus-config
    triggers:
    - type: ConfigChange
